# MSA - MicroService

## Software Architecture

### History of IT System

| 시기        | 시스템 특징                                                                 |
|-------------|------------------------------------------------------------------------------|
| 1960~1980   | **Fragile, Cowboys**<br>하드웨어 중심(사양, 성격)에 맞춰 서비스 구성, 고가 서비스 기능 수정 및 변경 어려움, 깨지기 쉬운 시스템 |
| 1990~2000   | **Robust, Distributed**<br>분산 시스템, 서비스 변화에도 성능/안정성 향상 |
| 2010~       | **Resilient/Anti-Fragile, Cloud Native**<br>확장성, 안정성, 변화에도 탄력적 운영 |

#### Antifragile 시스템의 핵심 요소

- **Auto Scaling**: 리소스 사용량에 따라 자동으로 확장되는 기능
- **Microservices**: 기존의 모놀리식 구조를 분리하여 독립적으로 개발 및 배포 가능한 서비스로 구성
- **Chaos Engineering**: 예측 불가능한 상황에서도 시스템의 안정성을 유지하기 위한 실험적 접근
- **Continuous Deployment**: CI/CD 파이프라인을 통한 지속적인 통합 및 배포

### Cloud Native Architecture의 특징

- **확장 가능한 아키텍처**: 시스템의 부하 분산 및 가용성 보장
- **탄력적 아키텍처**: 서비스의 생성, 통합, 배포를 통해 비즈니스 환경 변화에 빠르게 대응
- **장애 격리**: 특정 서비스에 오류가 발생해도 다른 서비스에 영향을 주지 않도록 설계

### Cloud Native Application 구성 요소

- **Microservices**
- **CI/CD**
- **DevOps**
- **Containers 가상화**

---

## 12 Factors + 3 (Pivotal 확장 요소)

### Factors
PaaS를 제공하는 heroku가 제시한 Cloud Native Architecute를 개발하거나 운영할 때 고려해야 할 항목

1. **Codebase**: 하나의 코드베이스, 여러 배포
2. **Dependencies**: 명시적 선언과 격리
3. **Config**: 환경에 따라 다른 설정 분리
4. **Backing services**: 연결 가능한 외부 서비스 (DB, MQ 등)
5. **Build, release, run**: 빌드, 릴리즈, 실행 단계 구분
6. **Processes**: 애플리케이션은 stateless한 프로세스로 실행
7. **Port binding**: 자체적으로 HTTP 포트를 열어 서비스를 제공
8. **Concurrency**: 프로세스를 복제하여 수평 확장
9. **Disposability**: 빠른 시작과 정상 종료 보장
10. **Dev/prod parity**: 개발과 운영 환경 일치
11. **Logs**: 로그는 이벤트 스트림으로 처리
12. **Admin processes**: 일회성 관리 명령은 별도로 실행

### +3 추가 요소
pivotal이 12 Factors에서 3가지 항목을 추가했다.

- **API First**
- **Telemetry**
- **Authentication & Authorization**

---

## Monolith vs Microservice

### Monolithic Architecture
- 모놀리식 아키텍처는 **모든 로직이 하나의 큰 애플리케이션으로 패키지** 되어 있는 전통적인 아키텍처 서비스
- 애플리케이션에서 사용하는 데이터가 한곳에 모여 서비스되는 형태

**장점**
- 개발 및 테스트가 단순하고 쉽다.
- 배포와 확장이 단순하며, 통합이 용이하다.
- 작은 규모의 프로젝트에 적합히다.

**단점**
- 큰 규모의 애플리케이션은 유지 보수가 어렵다.
- 장애 전파 - 하나의 모듈에 오류가 발생하면 전체 시스템에 영향을 미칠 수 있다.
- 대규모 팀이 협업할 때 충돌 가능성이 높다.
- 확장성 낮음

### Microservice Architecture

- MSA는 **애플리케이션을 여러 개의 작은 독립적인 서비스로 분리**하는 아키텍처 패턴이다.
- 독립적으로 배포, 확장 및 관리될 수 있다.
- 각 서비스는 특정 비즈니스 기능을 담당하며, 서로간에는 API를 통해 통신한다.
- 각 서비스는 느슨한 결합을 가지게 되어, 한 서비스의 변경이 다른 서비스에 영향을 미치지 않는다.

**장점**

- 높은 확장성과 유연성을 제공하여 대규모 애플리케이션에 적합하다.
- 특정 기능을 담당하는 작은 팀이 개별 서비스를 독립적으로 개발하고 관리할 수 있다.
- 기술 스택과 데이터베이스 선택의 자유도가 높다

**단점**

- 개발과 운영에 추가적인 복잡성이 발생한다.
- 서비스 간 통신을 위한 오버헤드가 발생할 수 있다.
- 모든 서비스가 정상적으로 동작해야 전체 시스템이 정상적으로 작동한다.
- 운영 난이도 증가

---

## SOA vs MSA

### **SOA (Service-Oriented Architecture)**

- SOA는 소프트웨어 시스템을 서비스들의 집합으로 구성하는 아키텍처 패턴이다.
- MSA보다 더 큰 규모의 서비스를 가지고 있을 수 있으며, 일반적으로 기업 환경에서의 비즈니스 프로세스를 지원하는데 중점을 둔다.
- 프로세스의 재사용을 통해 비용을 절감할 수 있다
- 서비스 공유를 최대화하는 아키텍처이다

**특징**

- **비즈니스 중심**: 기업의 비즈니스 프로세스에 집중하며, 기존의 비즈니스 프로세스를 재사용하거나 변경하기 위해 서비스를 설계한다.
- **ESB (Enterprise Service Bus)**: SOA는 종종 **ESB와 함께 사용**되는데 ESB는 서비스 간의 통신을 중개하고, 서비스들 간에 메시지 라우팅과 변환 등의 중요한 역할을 수행한다.
- **기업 환경**: SOA는 기업의 비즈니스 요구사항을 충족하는데 주로 사용된다. 기업의 다양한 부서나 시스템 간에 상호작용하는 서비스들을 구축하기에 적합하다.

### **MSA (Microservices Architecture)**

- MSA는 소프트웨어를 작고 독립적인 단위로 나누어 각각을 서비스로 구성하는 아키텍처 패턴이다.
- 각 서비스는 자체적으로 독립된 데이터베이스와 비즈니스 로직을 가지고 있으며, 서로 간에 통신을 통해 상호작용한다.
- 서비스 공유를 최소화하는 아키텍처이다.
  
**특징**
- **작은 규모의 서비스**: MSA는 작은 규모의 서비스 단위로 구성되므로, 서비스 간의 결합도가 낮아지고 유연성과 확장성이 향상된다.
- **독립적인 배포**: 각 서비스는 독립적으로 배포 가능하며, 개별적인 업데이트와 스케일링이 가능하다.
- **다양한 기술 스택**: 서비스 간에 다양한 기술 스택을 사용할 수 있어서 개발자들이 최적의 기술을 선택하여 개발할 수 있다.
- **느슨한 결합**: 서비스 간의 통신은 HTTP, REST, 메시지 큐 등을 이용하여 이루어지며, 각 서비스는 독립적으로 동작하므로 느슨한 결합이 가능하다.
- **높은 확장성**: 트래픽 증가 시 해당 서비스만 확장할 수 있어서 리소스의 효율적인 사용이 가능하다.

| 구분        | SOA                               | MSA                                     |
|-------------|------------------------------------|------------------------------------------|
| 중심        | 비즈니스 프로세스                 | 독립적 마이크로 서비스                  |
| 통신 방식   | ESB 기반 메시징                    | REST, HTTP, 메시지 브로커               |
| 배포        | 단위 모듈 배포 어려움              | 서비스 단위 배포 쉬움                   |
| 기술 스택   | 제한적                             | 자유로운 선택                           |
